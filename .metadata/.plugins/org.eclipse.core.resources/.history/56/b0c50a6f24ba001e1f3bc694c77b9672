package step15;

import java.io.*;
import java.util.*;

public class no4948 {

	public static void main(String[] args) throws IOException {
		// 베르트랑 공준
		// 소수를 더 자유자재로 다루는 문제 1
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb;
		
		while (true) {
			int N = Integer.parseInt(br.readLine());
			int M = N * 2;
			int count = 0;

			// N <= 1 일 때 종료
			if (N <= 1) return;
			List<Boolean> primeList = new ArrayList<>(N+1);
			// 0번째와 1번째를 소수 아님으로 처리
			primeList.add(false);
			primeList.add(false);
			// 2~N 까지 소수로 설정
			for (int i = 2; i <= N; i++) {
				primeList.add(i, true);
			}
			// 2부터 ~ i*i <= N
			// 각각의 배수들을 지워간다.
			for (int i = 2; (i*i) <= N; i++) {
				if (primeList.get(i)) {
					for (int j = i*i; j <= N; j += i) {
						primeList.set(j, false);
						// i*i 미만은 이미 처리되었으므로 j의 시작값은 i*i로 최적화할 수 있다.
					}
				}
			}
			for (int i = 2; i < M; i++) {
				primeList.set(i, false);
			}
			
			sb = new StringBuilder();
			for (int i = 0; i <= N; i++) {
				if (primeList.get(i) == true) {
					count++;
				}
			}
			sb.append(count).append('\n');
			System.out.println(sb);
		}
		
		
	}

}
